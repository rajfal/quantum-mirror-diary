---
import DiaryEntryLayout from '../layouts/DiaryEntryLayout.astro';
import { getCollection, getEntry } from 'astro:content';
import { getCypherDate } from '../utils/getCypherDate.js';

// Get the most recent Present entry
const presentEntries = await getCollection('present-reality');

presentEntries.sort((a, b) => {
  const dateA = a.data?.date || '';
  const dateB = b.data?.date || '';
  return dateB.localeCompare(dateA);
});

const latest = presentEntries[0];
const slug = latest?.slug;

const cypherTimestamp = getCypherDate(slug);

// Get Present/Future/Reflection content
const presentEntry = slug ? await getEntry('present-reality', slug) : null;
const futureEntry = slug ? await getEntry('future-echo', slug) : null;
const reflectionEntry = slug ? await getEntry('reflection-point', slug) : null;

// âœ… Get latest Hooks and Manuals
const hooks = await getCollection('hooks');
const manuals = await getCollection('manual');

// Merge and sort by date
const combinedSignals = [...hooks, ...manuals]
  .sort((a, b) => {
    const dateA = a.data?.date || '';
    const dateB = b.data?.date || '';
    return dateB.localeCompare(dateA);
  })
  .slice(0, 3);

---

<DiaryEntryLayout 
  date={cypherTimestamp}
  showIntent={true}
  signalItems={combinedSignals}
  present={presentEntry?.rendered?.html ?? `<em>No Present entry for ${slug}</em>`}
  future={futureEntry?.rendered?.html ?? `<em>No Future entry for ${slug}</em>`}
  reflection={reflectionEntry?.rendered?.html ?? `<em>No Reflection entry for ${slug}</em>`}
/>
